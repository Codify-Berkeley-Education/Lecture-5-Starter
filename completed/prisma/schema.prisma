// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // "postgresql" | "mysql" | "sqlite"
  url      = env("DATABASE_URL")
}

// Each model corresponds to a table in a realational database
model Song {
  // Every model has an id field, which can be manually assigned upon creation or autoincremented
  id       Int    @id @default(autoincrement()) // Alternatively can do UUID's with @default(uuid())
  title    String
  // The artistId field is a foreign key to the Artist model
  artistId Int
  // Defines a relation between the Song and Artist models. Each artist can have many songs, but in our model, each song can only have one artist
  artist   Artist @relation("Artist's Songs", fields: [artistId], references: [id])
  // Similiarly, each album can have many songs, but each song can only have one album
  albumId  Int
  album    Album  @relation("Album's Songs", fields: [albumId], references: [id])
}

model Artist {
  id     Int     @id @default(autoincrement())
  name   String
  songs  Song[]  @relation("Artist's Songs")
  albums Album[] @relation("Artist's Albums")

  // Each artist must be connected to a user profile, but not all users have an artist profile
  // This is a one to one relation
  userProfile   User @relation("UserProfile", fields: [userProfileId], references: [id])
  userProfileId Int  @unique
}

model Album {
  id       Int    @id @default(autoincrement())
  name     String
  artistId Int
  artist   Artist @relation("Artist's Albums", fields: [artistId], references: [id])
  songs    Song[] @relation("Album's Songs")
}

model User {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique

  // One to one relation with the Artist model
  // Notice it is structured such that the user profile must be created first, 
  // and then the artist profile is created after because users can exist without an artist profile
  artistProfile   Artist? @relation("UserProfile")
  artistProfileId Int?

  // All of these self relations need be be "doubly defined"
  // In other words, each user has to have a list of all the people they follow, and all the people who follow them
  // This is because the relation is defined twice, once for each side of the relation

  // One to one self relation
  // Every user is allowed to have a single successor
  // and every user can be the successor of a single user (their predecessor)
  successorId Int?  @unique
  successor   User? @relation("BlogOwnerHistory", fields: [successorId], references: [id])
  predecessor User? @relation("BlogOwnerHistory")

  // One to many self relation
  // Each user is allowed have one favorite user (Like their favorite artist or producer)
  // But a given user (Like Taylor Swift) can have many users who consider them their favorite
  favoriteUserId Int?
  favoriteUser   User?  @relation("BiggestFan", fields: [favoriteUserId], references: [id])
  biggestFans    User[] @relation("BiggestFan")

  // Many to many self relation
  // The user can follow many other users, and can be followed by many other users
  followedBy User[] @relation("UserFollows")
  following  User[] @relation("UserFollows")
}

// User creation flow:
// We want to minimize the number of "dangling" items in our database that don't have any relations defined
// We enforce this by making sure that almost all relations are requred, except for the "optional side" of one to one relations
// The process of adding data would look like this

// 1. A user is created. They need an id, name, and email, but don't have to have any other relations defined after that
// 2. An artist is created. The artist has to have a user profile, so the user had to be created first
// 3. An album is created. Every album has to have an artist, so the artist had to be created first
// 4. A song is created. Every song has to have an artist and an album, so the artist and album had to be created first

// This way, we can't ever have a song in our database that does not have an associated album and artist
